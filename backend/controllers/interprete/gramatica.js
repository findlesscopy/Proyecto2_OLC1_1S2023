/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,25],$V2=[1,36],$V3=[1,35],$V4=[1,34],$V5=[1,29],$V6=[1,31],$V7=[1,32],$V8=[1,33],$V9=[1,28],$Va=[1,26],$Vb=[1,27],$Vc=[1,23],$Vd=[1,30],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[2,5,27,35,41,45,46,48,49,51,52,53,54,55,56,59,64,65,105,106,107,108,109],$Vk=[1,52],$Vl=[1,53],$Vm=[1,54],$Vn=[1,82],$Vo=[1,75],$Vp=[1,85],$Vq=[1,86],$Vr=[1,87],$Vs=[1,88],$Vt=[1,89],$Vu=[1,90],$Vv=[1,91],$Vw=[1,84],$Vx=[1,83],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,80],$VD=[1,81],$VE=[1,95],$VF=[27,28,34,38],$VG=[9,34],$VH=[1,125],$VI=[1,127],$VJ=[1,115],$VK=[1,116],$VL=[1,129],$VM=[1,130],$VN=[1,123],$VO=[1,124],$VP=[1,126],$VQ=[1,128],$VR=[1,117],$VS=[1,118],$VT=[1,119],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[9,30,34,36,38,45,62,63,67,68,86,87,89,90,91,92,93,94,95,96,97,98],$VY=[2,67],$VZ=[34,68],$V_=[9,30,34,36,38,45,67,68,86,87,89,90,91,92,93,94],$V$=[9,30,34,45,67,68,86,87],$V01=[1,198],$V11=[2,5,9,27,30,34,35,36,38,41,45,46,48,49,51,52,53,54,55,56,59,62,63,64,65,67,68,86,87,89,90,91,92,93,94,95,96,97,98,105,106,107,108,109],$V21=[9,30,34,36,38,45,67,68,86,87,89,90,91,92,93,94,95,96,97],$V31=[9,30,34,36,38,45,67,68,86,87,89,90,91,92],$V41=[45,68],$V51=[1,265],$V61=[46,48];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DEFPRINT":7,"DECLARAR":8,"PUNTOYCOMA":9,"FUNCION":10,"LLAMADAFUNCION":11,"INCREMENTO":12,"DECREMENTO":13,"CICLO_FOR":14,"CONTROL_IF":15,"MAIN_INST":16,"CICLO_WHILE":17,"METODOS":18,"RETORNOS":19,"CICLO_DOWHILE":20,"CONTROL_SWITCH":21,"VECTORES":22,"LLAMADAVECTOR":23,"LISTAS":24,"ADDLISTAS":25,"LLAMADALISTA":26,"ID":27,"CORCHETEIZQ":28,"EXPRESION":29,"CORCHETEDER":30,"PUNTO":31,"ADD":32,"PARENTESISIZQ":33,"PARENTESISDER":34,"LIST":35,"MENOR":36,"TIPO":37,"MAYOR":38,"IGUAL":39,"NEW":40,"SWITCH":41,"LLAVEIZQ":42,"CASELIST":43,"DEFAULT_EXP":44,"LLAVEDER":45,"CASE":46,"STATEMENT_SWITCH":47,"DEFAULT":48,"DO":49,"STATEMENT":50,"WHILE":51,"RETURN_EXP":52,"BREAK":53,"CONTINUE":54,"MAIN":55,"FOR":56,"DECLARAR_FOR":57,"RELACIONALES":58,"IF":59,"CONTROL_ELSE":60,"ELSE":61,"INCREMENTO_SIMBOLO":62,"DECREMENTO_SIMBOLO":63,"PRINT":64,"VOID":65,"PARAMETROS":66,"DOSPUNTOS":67,"COMA":68,"PARAMETRO":69,"ARGUMENTOS":70,"PRIMITIVO":71,"ACCEDERVAR":72,"ARITMETICA":73,"LOGICOS":74,"CASTEOS":75,"FUNCIONES_NATIVAS":76,"LLAMADAVECTOR_EXPRESION":77,"VALORES":78,"TOLOWER":79,"TOUPPER":80,"LENGTH":81,"TRUNCATE":82,"ROUND":83,"TYPEOF":84,"TOSTRING":85,"AND":86,"OR":87,"NOT":88,"IGUALACION":89,"DIFERENCIACION":90,"MENORIGUAL":91,"MAYORIGUAL":92,"MAS":93,"MENOS":94,"POR":95,"DIVIDIDO":96,"MODULO":97,"POTENCIA":98,"ENTERO":99,"DECIMAL":100,"CADENA":101,"CARACTER":102,"TRUE":103,"FALSE":104,"INT":105,"STRING":106,"CHAR":107,"DOUBLE":108,"BOOLEAN":109,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PUNTOYCOMA",27:"ID",28:"CORCHETEIZQ",30:"CORCHETEDER",31:"PUNTO",32:"ADD",33:"PARENTESISIZQ",34:"PARENTESISDER",35:"LIST",36:"MENOR",38:"MAYOR",39:"IGUAL",40:"NEW",41:"SWITCH",42:"LLAVEIZQ",45:"LLAVEDER",46:"CASE",48:"DEFAULT",49:"DO",51:"WHILE",52:"RETURN_EXP",53:"BREAK",54:"CONTINUE",55:"MAIN",56:"FOR",59:"IF",61:"ELSE",62:"INCREMENTO_SIMBOLO",63:"DECREMENTO_SIMBOLO",64:"PRINT",65:"VOID",67:"DOSPUNTOS",68:"COMA",79:"TOLOWER",80:"TOUPPER",81:"LENGTH",82:"TRUNCATE",83:"ROUND",84:"TYPEOF",85:"TOSTRING",86:"AND",87:"OR",88:"NOT",89:"IGUALACION",90:"DIFERENCIACION",91:"MENORIGUAL",92:"MAYORIGUAL",93:"MAS",94:"MENOS",95:"POR",96:"DIVIDIDO",97:"MODULO",98:"POTENCIA",99:"ENTERO",100:"DECIMAL",101:"CADENA",102:"CARACTER",103:"TRUE",104:"FALSE",105:"INT",106:"STRING",107:"CHAR",108:"DOUBLE",109:"BOOLEAN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[26,6],[25,7],[24,12],[21,8],[43,4],[43,3],[44,2],[20,7],[19,3],[19,2],[19,2],[19,2],[17,5],[16,2],[14,9],[14,9],[15,6],[60,2],[60,2],[60,0],[12,2],[13,2],[7,5],[8,2],[8,4],[8,3],[57,4],[57,3],[18,5],[18,6],[10,5],[10,6],[50,3],[47,2],[66,3],[66,1],[69,2],[11,4],[11,5],[70,3],[70,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,2],[29,2],[29,3],[23,5],[77,4],[22,11],[22,9],[78,3],[78,1],[76,4],[76,4],[76,4],[76,4],[76,4],[76,4],[76,4],[75,4],[74,3],[74,3],[74,2],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,3],[73,2],[72,1],[71,1],[71,1],[71,1],[71,1],[71,1],[71,1],[37,1],[37,1],[37,1],[37,1],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 6: case 7: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 40: case 41: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71: case 72: case 73:
 this.$ = $$[$0]; 
break;
case 5: case 8: case 9: case 76:
 this.$ = $$[$0-1]; 
break;
case 22:
   console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column);
break;
case 23:
 this.$ = new LlamadaLista($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 24:
 this.$ = new AddListas($$[$0-6], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 25:
 this.$ = new Listas($$[$0-9], $$[$0-7], _$[$0-11].first_line, _$[$0-11].first_column); 
break;
case 26:
 this.$ = new Switch($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 27:
 $$[$0-3].push(new Case($$[$0-1], $$[$0], false, _$[$0-3].first_line, _$[$0-3].first_column)); this.$ = $$[$0-3];  
break;
case 28:
 this.$ = [new Case($$[$0-1], $$[$0], false, _$[$0-2].first_line, _$[$0-2].first_column)]; 
break;
case 29:
 this.$ = new Default($$[$0], false, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 30:
 this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 31:
 this.$ = new Return_Exp($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 32:
 this.$ = new Return_Exp(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 33:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 34:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 35:
 this.$ = new While($$[$0-2],$$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 36:
 this.$ = new Main($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 37: case 38:
 this.$ = new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 39:
 this.$ = new If($$[$0-3],$$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 42:
 this.$ = null; 
break;
case 43:
 this.$ = new IncrementoIns($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 44:
 this.$ = new DecrementoIns($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 45:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2]); 
break;
case 46:
 this.$ = new Declarar($$[$0], $$[$0-1], null, _$[$0-1].first_line, _$[$0-1].first_column );
break;
case 47: case 49:
 this.$ = new Declarar($$[$0-2], $$[$0-3], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column );
break;
case 48:
 this.$ = new ReDeclarar($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 50:
 this.$ = new Declarar(null, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column );
break;
case 51:
 this.$ = new Funcion(Type.VOID, $$[$0-3], [],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 52:
 this.$ = new Funcion(Type.VOID, $$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 53:
 this.$ = new Funcion($$[$0-4], $$[$0-3], [],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 54:
 this.$ = new Funcion($$[$0-5], $$[$0-4], $$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 55:
 this.$ = new Statement($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 56:
 this.$ = new Statement($$[$0],_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 57: case 62: case 81:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 58: case 63: case 82:
 this.$ = [$$[$0]];
break;
case 59:
 this.$ = new Parametros($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 60:
 this.$ = new LlamadaFuncion($$[$0-3],[],_$[$0-3].first_line, _$[$0-3].first_column)
break;
case 61:
 this.$ = new LlamadaFuncion($$[$0-4],$$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column)
break;
case 74:
 this.$ = new Incremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 75:
 this.$ = new Decremento($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 77:
 this.$ = new LlamadaVector($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 78:
 this.$ = new LlamadaVector($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 79:
 this.$ = new Vector($$[$0-10],$$[$0-7],$$[$0-2],null,_$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 80:
 this.$ = new Vector($$[$0-8],$$[$0-5],$$[$0-2].length,$$[$0-2],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 83:
 this.$ = new toLower($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 84:
 this.$ = new toUpper($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 85:
 this.$ = new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 86:
 this.$ = new Truncate($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 87:
 this.$ = new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 88:
 this.$ = new Typeof($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 89:
 this.$ = new toString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 90:
 this.$ = new Casteo($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 91:
 this.$ = new Logicos($$[$0-2], $$[$0], TipoLogicos.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Logicos($$[$0-2], $$[$0], TipoLogicos.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 93:
 this.$ = new Logicos($$[$0], $$[$0], TipoLogicos.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 94:
 this.$ = new Relacionales($$[$0-2], $$[$0], TipoRelacional.IGUALACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 95:
 this.$ = new Relacionales($$[$0-2], $$[$0], TipoRelacional.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:
 this.$ = new Relacionales($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 97:
 this.$ = new Relacionales($$[$0-2], $$[$0], TipoRelacional.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98:
 this.$ = new Relacionales($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 99:
 this.$ = new Relacionales($$[$0-2], $$[$0], TipoRelacional.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoOperacion.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 101:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoOperacion.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 102:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoOperacion.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 103:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoOperacion.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 104:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoOperacion.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 105:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoOperacion.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = new Aritmetica($$[$0], $$[$0], TipoOperacion.MENOSUNARIO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 107:
 this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 108:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.INT); 
break;
case 109:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.DOUBLE); 
break;
case 110:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.STRING);
break;
case 111:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.CHAR); 
break;
case 112: case 113:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column,$$[$0],Type.BOOLEAN); 
break;
case 114:
 this.$ = Type.INT; 
break;
case 115:
 this.$ = Type.STRING; 
break;
case 116:
 this.$ = Type.CHAR; 
break;
case 117:
 this.$ = Type.DOUBLE; 
break;
case 118:
 this.$ = Type.BOOLEAN; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:$V1,35:$V2,37:24,41:$V3,49:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,64:$Vc,65:$Vd,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},{1:[3]},{2:$V0,5:[1,42],6:43,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:$V1,35:$V2,37:24,41:$V3,49:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,64:$Vc,65:$Vd,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},o($Vj,[2,3]),o($Vj,[2,4]),{9:[1,44]},o($Vj,[2,6]),o($Vj,[2,7]),{9:[1,45]},{9:[1,46]},o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,14]),o($Vj,[2,15]),o($Vj,[2,16]),o($Vj,[2,17]),o($Vj,[2,18]),o($Vj,[2,19]),o($Vj,[2,20]),o($Vj,[2,21]),{9:[1,47]},{33:[1,48]},{27:[1,49],28:[1,50]},{28:[1,55],31:[1,56],33:$Vk,39:[1,51],62:$Vl,63:$Vm},{33:[1,57]},{33:[1,58]},{11:59,27:[1,60]},{33:[1,61]},{27:[1,62]},{9:[1,64],11:71,26:74,27:$Vn,29:63,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{9:[1,92]},{9:[1,93]},{42:$VE,50:94},{33:[1,96]},{36:[1,97]},o($VF,[2,114]),o($VF,[2,115]),o($VF,[2,116]),o($VF,[2,117]),o($VF,[2,118]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,5]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,22]),{11:71,26:74,27:$Vn,29:98,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{9:[2,46],33:[1,100],39:[1,99]},{30:[1,101]},{11:71,26:74,27:$Vn,29:102,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:105,33:$Vo,34:[1,103],58:68,70:104,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($VG,[2,43]),o($VG,[2,44]),{11:71,26:74,27:$Vn,29:106,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{32:[1,107]},{27:[1,110],37:109,57:108,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},{11:71,26:74,27:$Vn,29:111,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($Vj,[2,36]),{33:$Vk},{11:71,26:74,27:$Vn,29:112,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{33:[1,113]},{9:[1,114],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},o($Vj,[2,32]),o($VX,[2,64]),o($VX,[2,65]),o($VX,[2,66]),o($VX,$VY),o($VX,[2,68]),o($VX,[2,69]),o($VX,[2,70]),o($VX,[2,71]),o($VX,[2,72]),o($VX,[2,73]),{11:71,26:74,27:$Vn,29:131,33:$Vo,37:132,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},o($VX,[2,108]),o($VX,[2,109]),o($VX,[2,110]),o($VX,[2,111]),o($VX,[2,112]),o($VX,[2,113]),o($VX,[2,107],{28:[1,133],33:$Vk}),{11:71,26:74,27:$Vn,29:134,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:135,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{33:[1,136]},{33:[1,137]},{33:[1,138]},{33:[1,139]},{33:[1,140]},{33:[1,141]},{33:[1,142]},o($Vj,[2,33]),o($Vj,[2,34]),{51:[1,143]},{2:$V0,4:144,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:$V1,35:$V2,37:24,41:$V3,49:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,64:$Vc,65:$Vd,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},{11:71,26:74,27:$Vn,29:145,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{37:146,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},{34:[1,147],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{11:71,26:74,27:$Vn,29:148,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{34:[1,149],37:152,66:150,69:151,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},{27:[1,153]},{9:[2,48],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{9:[1,154]},{34:[1,155],68:[1,156]},o($VZ,[2,63],{36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),{30:[1,157],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{33:[1,158]},{9:[1,159]},{27:[1,160]},{39:[1,161]},{34:[1,162],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{34:[1,163],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{34:[1,164],37:152,66:165,69:151,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},o($Vj,[2,31]),o($VX,[2,74]),o($VX,[2,75]),{11:71,26:74,27:$Vn,29:166,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:167,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:168,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:169,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:170,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:171,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:172,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:173,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:174,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:175,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:176,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:177,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:178,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:179,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{34:[1,180],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{34:[1,181]},{11:71,26:74,27:$Vn,28:[1,183],29:182,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o($V_,[2,106],{62:$VJ,63:$VK,95:$VT,96:$VU,97:$VV,98:$VW}),o($V$,[2,93],{36:$VH,38:$VI,62:$VJ,63:$VK,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),{11:71,26:74,27:$Vn,29:184,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:185,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:186,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:187,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:188,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:189,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:190,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{33:[1,191]},{2:$V0,6:43,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:$V1,35:$V2,37:24,41:$V3,45:[1,192],49:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,64:$Vc,65:$Vd,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},{34:[1,193],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{38:[1,194]},{9:[1,195]},{9:[2,47],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{42:$VE,50:196},{34:[1,197],68:$V01},o($VZ,[2,58]),{27:[1,199]},{39:[1,200]},o($V11,[2,60]),{9:[1,201]},{11:71,26:74,27:$Vn,29:202,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{9:[1,203]},{11:71,26:74,27:$Vn,29:204,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{11:71,26:74,27:$Vn,29:206,33:$Vo,58:205,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{39:[1,207]},{11:71,26:74,27:$Vn,29:208,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{42:$VE,50:209},{42:$VE,50:210},{42:$VE,50:211},{34:[1,212],68:$V01},o($V_,[2,100],{62:$VJ,63:$VK,95:$VT,96:$VU,97:$VV,98:$VW}),o($V_,[2,101],{62:$VJ,63:$VK,95:$VT,96:$VU,97:$VV,98:$VW}),o($V21,[2,102],{62:$VJ,63:$VK,98:$VW}),o($V21,[2,103],{62:$VJ,63:$VK,98:$VW}),o($V21,[2,104],{62:$VJ,63:$VK,98:$VW}),o([9,30,34,36,38,45,67,68,86,87,89,90,91,92,93,94,95,96,97,98],[2,105],{62:$VJ,63:$VK}),o($V31,[2,94],{62:$VJ,63:$VK,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($V31,[2,95],{62:$VJ,63:$VK,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($V31,[2,96],{62:$VJ,63:$VK,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($V31,[2,97],{62:$VJ,63:$VK,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($V31,[2,98],{62:$VJ,63:$VK,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($V31,[2,99],{62:$VJ,63:$VK,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($V$,[2,91],{36:$VH,38:$VI,62:$VJ,63:$VK,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o([9,30,34,45,67,68,87],[2,92],{36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($VX,[2,76]),{11:71,26:74,27:$Vn,29:213,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{30:[1,214],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{11:71,26:74,27:$Vn,29:215,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{34:[1,216],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{34:[1,217],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{34:[1,218],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{34:[1,219],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{34:[1,220],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{34:[1,221],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{34:[1,222],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{11:71,26:74,27:$Vn,29:223,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},o([2,5,27,35,41,45,46,48,49,51,52,53,54,55,56,59,61,64,65,105,106,107,108,109],[2,55]),{42:[1,224]},{27:[1,225]},o($Vj,[2,45]),o($Vj,[2,53]),{42:$VE,50:226},{37:152,69:227,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},o($VZ,[2,59]),{40:[1,228],42:[1,229]},o($V11,[2,61]),o($VZ,[2,62],{36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($Vj,[2,77]),{34:[1,230],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},o([36,38,62,63,86,87,89,90,91,92,93,94,95,96,97,98],$VY,{9:[1,231]}),{36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{11:71,26:74,27:$Vn,29:232,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{9:[2,50],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},o($Vj,[2,42],{60:233,61:[1,234]}),o($Vj,[2,35]),o($Vj,[2,51]),{42:$VE,50:235},o($VX,[2,90]),o($VX,[2,78]),{30:[1,236],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},o($VX,[2,83]),o($VX,[2,84]),o($VX,[2,85]),o($VX,[2,86]),o($VX,[2,87]),o($VX,[2,88]),o($VX,[2,89]),{34:[1,237],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{43:238,46:[1,239]},{39:[1,240]},o($Vj,[2,54]),o($VZ,[2,57]),{37:241,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},{11:71,26:74,27:$Vn,29:243,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,78:242,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{9:[1,244]},{12:245,13:246,27:[1,247]},{9:[2,49],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},o($Vj,[2,39]),{15:249,42:$VE,50:248,59:$Vb},o($Vj,[2,52]),{30:[1,250]},{9:[1,251]},{44:252,46:[1,253],48:[1,254]},{11:71,26:74,27:$Vn,29:255,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{40:[1,256]},{28:[1,257]},{45:[1,258],68:[1,259]},o($V41,[2,82],{36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($Vj,[2,24]),{34:[1,260]},{34:[1,261]},{62:$Vl,63:$Vm},o($Vj,[2,40]),o($Vj,[2,41]),o($VX,[2,23]),o($Vj,[2,30]),{45:[1,262]},{11:71,26:74,27:$Vn,29:263,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{47:264,67:$V51},{36:$VH,38:$VI,47:266,62:$VJ,63:$VK,67:$V51,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{35:[1,267]},{11:71,26:74,27:$Vn,29:268,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{9:[1,269]},{11:71,26:74,27:$Vn,29:270,33:$Vo,58:68,71:65,72:66,73:67,74:69,75:70,76:72,77:73,79:$Vp,80:$Vq,81:$Vr,82:$Vs,83:$Vt,84:$Vu,85:$Vv,88:$Vw,94:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,103:$VC,104:$VD},{42:$VE,50:271},{42:$VE,50:272},o($Vj,[2,26]),{36:$VH,38:$VI,47:273,62:$VJ,63:$VK,67:$V51,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},{45:[2,29]},{2:$V0,4:274,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,27:$V1,35:$V2,37:24,41:$V3,49:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,64:$Vc,65:$Vd,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},o($V61,[2,28]),{36:[1,275]},{30:[1,276],36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW},o($Vj,[2,80]),o($V41,[2,81],{36:$VH,38:$VI,62:$VJ,63:$VK,86:$VL,87:$VM,89:$VN,90:$VO,91:$VP,92:$VQ,93:$VR,94:$VS,95:$VT,96:$VU,97:$VV,98:$VW}),o($Vj,[2,37]),o($Vj,[2,38]),o($V61,[2,27]),o([45,46,48],[2,56],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:21,37:24,6:43,2:$V0,27:$V1,35:$V2,41:$V3,49:$V4,51:$V5,52:$V6,53:$V7,54:$V8,55:$V9,56:$Va,59:$Vb,64:$Vc,65:$Vd,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi}),{37:277,105:$Ve,106:$Vf,107:$Vg,108:$Vh,109:$Vi},{9:[1,278]},{38:[1,279]},o($Vj,[2,79]),{9:[1,280]},o($Vj,[2,25])],
defaultActions: {42:[2,1],264:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  // importar tipos
  const {Type} = require('./Abstractas/Return');
  const {Primitivo} = require('./Expresiones/Primitivo');
  const {Print} = require('./Instrucciones/Print');
  const {Declarar} = require('./Instrucciones/Declarar');
  const {Acceso} = require('./Expresiones/Acceso');
  const {Aritmetica} = require('./Expresiones/Aritmetica');
  const {TipoOperacion} = require('./Utils/TipoOperacion');
  const {Relacionales} = require('./Expresiones/Relacionales');
  const {TipoRelacional} = require('./Utils/TipoRelacional');
  const {Logicos} = require('./Expresiones/Logicos');
  const {TipoLogicos} = require('./Utils/TipoLogicos');
  const {Ternario} = require('./Expresiones/Ternario');
  const {Statement} = require('./Instrucciones/Statement');
  const {Funcion} = require('./Instrucciones/Funcion');
  const {Parametros} = require('./Expresiones/Parametros');
  const {LlamadaFuncion} = require('./Expresiones/LlamadaFuncion');
  const {Casteo} = require('./Expresiones/Casteos');
  const {Incremento} = require('./Expresiones/Incremento');
  const {Decremento} = require('./Expresiones/Decremento');
  const {IncrementoIns} = require('./Instrucciones/Incremento');
  const {DecrementoIns} = require('./Instrucciones/Decremento');
  const {Return_Exp} = require('./Expresiones/Return');
  const {For} = require('./Instrucciones/For');
  const {If} = require('./Instrucciones/If');
  const {Main} = require('./Instrucciones/Main');
  const {While} = require('./Instrucciones/While');
  const {ReDeclarar} = require('./Instrucciones/ReDeclarar');
  const {DoWhile} = require('./Instrucciones/DoWhile');
  const {Switch} = require('./Instrucciones/Switch');
  const {Case} = require('./Instrucciones/Case');
  const {Default} = require('./Instrucciones/Default');
  const {Break} = require('./Instrucciones/Break');
  const {Continue} = require('./Instrucciones/Continue');
  const {toLower} = require('./Expresiones/toLower');
  const {toUpper} = require('./Expresiones/toUpper');
  const {Length} = require('./Expresiones/Length');
  const {Truncate} = require('./Expresiones/Truncate');
  const {Round} = require('./Expresiones/Round');
  const {Typeof} = require('./Expresiones/Typeof');
  const {toString} = require('./Expresiones/toString');
  const {Vector} = require('./Expresiones/Vector');
  const {LlamadaVector} = require('./Expresiones/LlamadaVector');
  const {Listas} = require('./Expresiones/Listas');
  const {AddListas} = require('./Expresiones/AddLista');
  const {LlamadaLista} = require('./Expresiones/LlamadaLista');
 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return 103; 
break;
case 3:return 104;
break;
case 4:return 55;
break;
case 5:return 105; 
break;
case 6:return 106; 
break;
case 7:return 107; 
break;
case 8:return 108; 
break;
case 9:return 109;
break;
case 10:return 35; 
break;
case 11:return 40; 
break;
case 12:return 32; 
break;
case 13:return 59; 
break;
case 14:return 61; 
break;
case 15:return 'ELSEIF'; 
break;
case 16:return 41; 
break;
case 17:return 46; 
break;
case 18:return 48; 
break;
case 19:return 51; 
break;
case 20:return 56; 
break;
case 21:return 49; 
break;
case 22:return 53; 
break;
case 23:return 54; 
break;
case 24:return 52; 
break;
case 25:return 65; 
break;
case 26:return 64; 
break;
case 27:return 79; 
break;
case 28:return 80; 
break;
case 29:return 81;
break;
case 30:return 82;
break;
case 31:return 83;
break;
case 32:return 84;
break;
case 33:return 85;
break;
case 34:return 'TOCHARARRAY';
break;
case 35:return 9;
break;
case 36:return 42;
break;
case 37:return 45;
break;
case 38:return 33;
break;
case 39:return 34;
break;
case 40:return 28; 
break;
case 41:return 30; 
break;
case 42:return 31; 
break;
case 43:return 68;
break;
case 44:return 62; 
break;
case 45:return 63; 
break;
case 46:return 93; 
break;
case 47:return 94; 
break;
case 48:return 95; 
break;
case 49:return 96; 
break;
case 50:return 98; 
break;
case 51:return 97; 
break;
case 52:return 89; 
break;
case 53:return 90;
break;
case 54:return 91; 
break;
case 55:return 92; 
break;
case 56:return 36; 
break;
case 57:return 38; 
break;
case 58:return 39; 
break;
case 59:return 'TERNARIO'; 
break;
case 60:return 67; 
break;
case 61:return 86; 
break;
case 62:return 87; 
break;
case 63:return 88; 
break;
case 64:
break;
case 65:
break;
case 66:return 27;
break;
case 67:return 100;
break;
case 68:return 99;
break;
case 69: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 102; 
break;
case 70:cadena="";this.begin("string");
break;
case 71:cadena+=yy_.yytext;
break;
case 72:cadena+="\"";
break;
case 73:cadena+="\n";
break;
case 74:cadena+="\t";
break;
case 75:cadena+="\\";
break;
case 76:cadena+="\'";
break;
case 77:yy_.yytext=cadena; this.popState(); return 101;
break;
case 78:return 5;
break;
case 79: console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:(\/\/).*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:main\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:list\b)/i,/^(?:new\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:else if\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\?)/i,/^(?::)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:["])/i,/^(?:[^"\\]+)/i,/^(?:\\")/i,/^(?:\\n)/i,/^(?:\\t)/i,/^(?:\\\\)/i,/^(?:\\\\')/i,/^(?:["])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"COMMENT":{"rules":[],"inclusive":false},"string":{"rules":[71,72,73,74,75,76,77],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}